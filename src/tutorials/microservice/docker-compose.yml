services:
  mongo:
    container_name: mongo
    image: mongo:latest
      #    environment:
      #      - MONGO_INITDB_ROOT_USERNAME=mehmet
      #      - MONGO_INITDB_ROOT_PASSWORD=mehmet
      # !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    # Here you are setting the username and password
    # so change it to whatever you want
    # !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    ports:
      - "27017:27017"
    expose:
      - "27017"
    volumes:
      - ./mongo-data:/data/db
    networks:
      - spring-cloud-network
  mysql-order:
    image: mysql
    restart: always
    environment:
      MYSQL_DATABASE: 'order-service'
      # Password for root access
      MYSQL_ROOT_PASSWORD: 'mysql'
    ports:
      # <Port exposed> : < MySQL Port running inside container>
      - '3306:3306'
    expose:
      # Opens port 3306 on the container
      - '3306'
    networks:
      - spring-cloud-network
  mysql-inventory:
    image: mysql
    restart: always
    environment:
      MYSQL_DATABASE: 'inventory-service'
      # Password for root access
      MYSQL_ROOT_PASSWORD: 'mysql'
    ports:
      # <Port exposed> : < MySQL Port running inside container>
      - '3307:3306'
    expose:
      # Opens port 3306 on the container
      - '3307'
    networks:
      - spring-cloud-network
  keycloak:
    image: quay.io/keycloak/keycloak
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
    ports:
      # <Port exposed> : < MySQL Port running inside container>
      - '8088:8080'
    expose:
      # Opens port 3306 on the container
      - '8088'
    command:
      - start-dev
    networks:
      - spring-cloud-network
  zipkin:
    image: openzipkin/zipkin
    container_name: zipkin
    ports:
      - "9411:9411"
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - spring-cloud-network
  broker:
    image: confluentinc/cp-kafka:latest
    container_name: broker
    ports:
      - 9092:9092
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://broker:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    networks:
      - spring-cloud-network
  product-service:
    container_name: product-service
    build:
      context: product-service
      dockerfile: Dockerfile
    image: product-service:latest
    ports:
      - 9080:8080
    networks:
      - spring-cloud-network
  order-service:
    container_name: order-service
    build:
      context: order-service
      dockerfile: Dockerfile
    image: order-service:latest
    restart: always
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql-order:3306/order-service
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: mysql
      eureka_client_serviceUrl_defaultZone: "http://eureka:password@discovery-server:8761/eureka"
    ports:
      - 9081:8081
    depends_on:
      - mysql-order
      - discovery-server
    networks:
      - spring-cloud-network
  inventory-service:
    container_name: inventory-service
    build:
      context: inventory-service
      dockerfile: Dockerfile
    image: inventory-service:latest
    restart: always
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql-inventory:3306/inventory-service
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: mysql
      EUREKA_client_serviceUrl_defaultZone: "http://eureka:password@discovery-server:8761/eureka"
    ports:
      - 9082:8082
    depends_on:
      - mysql-inventory
      - discovery-server
    networks:
      - spring-cloud-network
  discovery-server:
    container_name: discovery-server
    build:
      context: discovery-server
      dockerfile: Dockerfile
    image: discovery-server:latest
    ports:
      - 8761:8761
    networks:
      - spring-cloud-network
  api-gateway:
    container_name: api-gateway
    build:
      context: api-gateway
      dockerfile: Dockerfile
    image: api-gateway:latest
    restart: always
#    environment:
#      eureka_client_serviceUrl_defaultZone: "http://eureka:password@discovery-server:8761/eureka"
#      spring_security_oauth2_resourceserver_jwt_issuer-uri: "http://keycloak:8088/realms/spring-boot-microservices-realm"
    ports:
      - 8000:8000
    depends_on:
      - keycloak
      - discovery-server
networks:
  spring-cloud-network:
    driver: bridge

